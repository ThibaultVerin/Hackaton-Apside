[{"/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/index.js":"1","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/App.js":"2","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/reportWebVitals.js":"3","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Home/Home.js":"4","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/context/UserContext.js":"5","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Board/Board.js":"6","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Board/Cell.js":"7","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Home/Upload.js":"8","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Home/Background.js":"9","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Home/Modal.js":"10","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Home/SoundEffectContext.js":"11","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Action/Action.js":"12","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Shifoumi/Play.js":"13","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/CurrentUser/CurrentUser.js":"14","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/component/home/Chat.js":"15"},{"size":449,"mtime":1610654212582,"results":"16","hashOfConfig":"17"},{"size":786,"mtime":1610708696010,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1610642516802,"results":"19","hashOfConfig":"17"},{"size":402,"mtime":1610658764057,"results":"20","hashOfConfig":"17"},{"size":1043,"mtime":1610708696018,"results":"21","hashOfConfig":"17"},{"size":6540,"mtime":1610708696015,"results":"22","hashOfConfig":"17"},{"size":1357,"mtime":1610708696016,"results":"23","hashOfConfig":"17"},{"size":3296,"mtime":1610704904466,"results":"24","hashOfConfig":"17"},{"size":239,"mtime":1610654212580,"results":"25","hashOfConfig":"17"},{"size":412,"mtime":1610642569195,"results":"26","hashOfConfig":"17"},{"size":478,"mtime":1610658764061,"results":"27","hashOfConfig":"17"},{"size":2467,"mtime":1610708696013,"results":"28","hashOfConfig":"17"},{"size":6074,"mtime":1610708760838,"results":"29","hashOfConfig":"17"},{"size":494,"mtime":1610704904464,"results":"30","hashOfConfig":"17"},{"size":1622,"mtime":1610708696012,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1ialoog",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"34"},"/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/index.js",[],["71","72"],"/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/App.js",[],"/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/reportWebVitals.js",[],"/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Home/Home.js",[],"/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/context/UserContext.js",[],"/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Board/Board.js",["73","74","75"],"import React, { useState, useContext, useEffect, useRef } from 'react';\nimport './Board.scss';\nimport avatar from '../../avatar.jpeg';\nimport io from 'socket.io-client';\nimport uuid from 'react-uuid';\nimport Cell from './Cell';\nimport Background from '../Home/Background';\nimport Action from '../Action/Action';\n\nimport { UserContext } from '../../context/UserContext';\nimport CurrentUser from '../CurrentUser/CurrentUser';\n// import Action from '../Action/Action';\n\nexport const createEmptyBoard = () => {\n  const BOARD_SIZE = 10;\n  const board = new Array(BOARD_SIZE);\n\n  for (let x = 0; x < BOARD_SIZE; x++) {\n    board[x] = new Array(BOARD_SIZE);\n    for (let y = 0; y < BOARD_SIZE; y++) {\n      board[x][y] = {\n        x,\n        y,\n        isPeople: false,\n        isWall: false,\n        isCoffee: false,\n        isComputer: false,\n        isDesk: false,\n        isTree: false,\n      };\n    }\n  }\n  return board;\n};\nexport const handleClassname = (cell) => {\n  if (cell.isWall === true) {\n    return 'wall';\n  } else if (cell.isCoffee === true) {\n    return 'coffee';\n  } else if (cell.isComputer === true) {\n    return 'computer';\n  } else if (cell.isDesk === true) {\n    return 'desk';\n  } else if (cell.isTree === true) {\n    return 'tree';\n  } else {\n    return 'cell';\n  }\n};\n\nexport const drawBoard = (board, user) => {\n  return board.map((row) => {\n    return row.map((cell, index) => {\n      return (\n        <Cell\n          key={index}\n          cellStyle={cell.isWall ? 'wall' : 'cell'}\n          isPlayer={cell.isPeople}\n          cell={cell}\n          // handleClassname={handleClassname}\n        />\n      );\n    });\n  });\n};\nexport const populateWithTree = (board, tree) => {\n  board.forEach((row) => {\n    row.forEach((cell) => {\n      tree.forEach((wCell) => {\n        if (wCell.x === cell.x && wCell.y === cell.y) {\n          return (cell.isTree = true);\n        }\n      });\n    });\n  });\n};\nexport const populateWithDesk = (board, desk) => {\n  board.forEach((row) => {\n    row.forEach((cell) => {\n      desk.forEach((wCell) => {\n        if (wCell.x === cell.x && wCell.y === cell.y) {\n          return (cell.isDesk = true);\n        }\n      });\n    });\n  });\n};\nexport const populateWithComputer = (board, computer) => {\n  board.forEach((row) => {\n    row.forEach((cell) => {\n      computer.forEach((wCell) => {\n        if (wCell.x === cell.x && wCell.y === cell.y) {\n          return (cell.isComputer = true);\n        }\n      });\n    });\n  });\n};\nexport const populateWithCoffee = (board, coffee) => {\n  board.forEach((row) => {\n    row.forEach((cell) => {\n      coffee.forEach((wCell) => {\n        if (wCell.x === cell.x && wCell.y === cell.y) {\n          return (cell.isCoffee = true);\n        }\n      });\n    });\n  });\n};\nexport const populateWithWall = (board, wall) => {\n  board.forEach((row) => {\n    row.forEach((cell) => {\n      wall.forEach((wCell) => {\n        if (wCell.x === cell.x && wCell.y === cell.y) {\n          return (cell.isWall = true);\n        }\n      });\n    });\n  });\n};\nexport const populateWithPeople = (board, people) => {\n  if (people) {\n    board.forEach((row) => {\n      row.forEach((cell) => {\n        people.forEach((p) => {\n          if (cell && p) {\n            if (p.x === cell.x && p.y === cell.y) {\n              cell.isPeople = true;\n              cell.avatar = p.avatar;\n              cell.user = p;\n              return cell;\n            }\n          }\n        });\n      });\n    });\n  }\n};\nexport const createBoard = (tree, desk, computer, coffee, wall, people) => {\n  const b = createEmptyBoard();\n  populateWithTree(b, tree);\n  populateWithDesk(b, desk);\n  populateWithComputer(b, computer);\n  populateWithCoffee(b, coffee);\n  populateWithWall(b, wall);\n  populateWithPeople(b, people);\n  return b;\n};\n\nexport const wall = [\n  { x: 0, y: 6 },\n  { x: 1, y: 6 },\n  { x: 3, y: 6 },\n  { x: 3, y: 7 },\n  { x: 3, y: 8 },\n  { x: 3, y: 9 },\n  { x: 2, y: 0 },\n  { x: 2, y: 1 },\n  { x: 2, y: 2 },\n  { x: 2, y: 3 },\n  { x: 3, y: 3 },\n  { x: 4, y: 3 },\n  { x: 7, y: 5 },\n  { x: 8, y: 5 },\n  { x: 9, y: 5 },\n];\n\nexport const coffee = [{ x: 3, y: 1 }];\n\nexport const computer = [{ x: 0, y: 8 }];\nexport const desk = [\n  { x: 7, y: 1 },\n  { x: 7, y: 3 },\n  { x: 9, y: 1 },\n  { x: 9, y: 3 },\n];\n\nexport const tree = [\n  { x: 0, y: 5 },\n  { x: 4, y: 9 },\n  { x: 7, y: 6 },\n  { x: 8, y: 9 },\n  { x: 9, y: 7 },\n];\n\nexport const shootPlayer = () => {};\n\nconst Board = () => {\n  const {\n    users,\n    setUsers,\n    currentUser,\n    setCurrentUser,\n    isActionOpen,\n    setIsActionopen,\n    socket,\n  } = useContext(UserContext);\n\n  const initialBoard = createBoard(tree, desk, computer, coffee, wall, users);\n\n  const [board, setBoard] = useState(initialBoard);\n  const [userID, setUserID] = useState();\n  const socketRef = useRef();\n  useEffect(() => {\n    const newBoard = createBoard(tree, desk, computer, coffee, wall, users);\n    setBoard(newBoard);\n  }, [users]);\n\n  // const socketRef = useRef();\n  // socket = io.connect('/');\n\n  useEffect(() => {\n    let usersRegistered = [];\n    socket.emit('sendCurrentUser', currentUser);\n\n    socket.on('connect', () => {});\n\n    socket.on('sendNewUser', (newUser) => {\n      const userAlreadyExist = usersRegistered.some(\n        (user) => user.id === newUser.id\n      );\n\n      if (!userAlreadyExist) {\n        usersRegistered.push(newUser);\n        setUsers((prevState) => [...prevState, newUser]);\n      }\n      socket.emit('clientSendFirstUser', currentUser);\n    });\n\n    socket.on('serverSendFirstUser', (newUser) => {\n      const userAlreadyExist = usersRegistered.some(\n        (user) => user.id === newUser.id\n      );\n\n      if (!userAlreadyExist) {\n        usersRegistered.push(newUser);\n        setUsers((prevState) => [...prevState, newUser]);\n      }\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  useEffect(() => {\n    socket.on('otherUserMove', (data) => {\n      setUsers((users) => {\n        return [...users.filter((user) => user.id !== data.id), data];\n      });\n      if (data.id === currentUser.id) {\n        setCurrentUser(data);\n      }\n    });\n  }, []);\n\n  return (\n    <div>\n      <Background />\n      <CurrentUser />\n\n      {isActionOpen && <Action />}\n      <div className='board-container'>{drawBoard(board, users)}</div>\n    </div>\n  );\n};\nexport default Board;\n","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Board/Cell.js",["76","77","78","79"],"import React, { useContext, useEffect } from 'react';\nimport { UserContext } from '../../context/UserContext';\nimport { handleClassname, shootPlayer } from './Board';\nimport { useHistory } from 'react-router-dom';\n\nexport default function Cell(props) {\n  const { isPlayer, cell } = props;\n  const {\n    users,\n    setUsers,\n    currentUser,\n    setCurrentUser,\n    isActionOpen,\n    setIsActionOpen,\n    socket,\n    setPlayerShot,\n  } = useContext(UserContext);\n\n  const history = useHistory();\n\n  let newCurrentUser = {};\n\n  const handleClick = (e) => {\n    if (cell.isComputer) {\n      history.push('/game');\n    }\n    if (isPlayer) {\n      setPlayerShot(cell.user);\n\n      setIsActionOpen(true);\n    } else {\n      setIsActionOpen(false);\n\n      if (cell.isPlayer) {\n        console.log(cell.user);\n      } else {\n        const userIndex = users.findIndex((user) => user.id === currentUser.id);\n\n        newCurrentUser = {\n          // eslint-disable-next-line no-restricted-globals\n          name: users[userIndex].name,\n          avatar: users[userIndex].avatar,\n          id: users[userIndex].id,\n          life: users[userIndex].life,\n          nerf: users[userIndex].nerf,\n          x: cell.x,\n          y: cell.y,\n        };\n\n        socket.emit('currentUserMove', newCurrentUser);\n      }\n    }\n  };\n\n  return (\n    <div className={cell && handleClassname(cell)} onClick={handleClick}>\n      {isPlayer && <img src={cell.avatar} alt='avatar' />}\n    </div>\n  );\n}\n","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Home/Upload.js",["80"],"import React, { useState, useContext } from 'react';\n/* import Modal from './Modal'; */\nimport './Upload.scss';\nimport axios from 'axios';\nimport { UserContext } from '../../context/UserContext';\nimport { Link } from 'react-router-dom';\n\nconst Upload = () => {\n  const [title, setTitle] = useState('Enter your Name');\n  const [mainPicture, setMainPicture] = useState(null);\n\n  const { users, setUsers } = useContext(UserContext);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const formData = new FormData();\n    formData.append('title', title);\n    formData.append('main_picture', mainPicture);\n\n    const res = await axios.post(\n      'http://localhost:5000/uploaddufichier',\n      formData\n    );\n    await setUsers([\n      {\n        name: res.data.name,\n        avatar: `http://localhost:5000/${res.data.path}`,\n        x: Math.floor(Math.random() * 10),\n        y: Math.floor(Math.random() * 10),\n      },\n    ]);\n  };\n\n  return (\n    <div>\n      <h2>Welcome On Board !</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type='text'\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n        <br />\n        <p>Select your picture</p>\n        <input\n          type='file'\n          onChange={(e) => setMainPicture(e.target.files[0])}\n        />\n        <br />\n        <input type='submit' value='Create Your Avatar' />\n        <p>how does it work ?</p>\n      </form>\n      <Link to='/board'>Join</Link>\n    </div>\n  );\n};\n\nexport default Upload;\n","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Home/Background.js",[],"/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Home/Modal.js",[],["81","82"],"/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Home/SoundEffectContext.js",[],"/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Action/Action.js",["83","84","85"],"import React, { useContext } from 'react';\nimport { UserContext } from '../../context/UserContext';\nimport './Action.scss';\n\nconst Action = () => {\n  const { users, setUsers, currentUser, setCurrentUser } = useContext(\n    UserContext\n  );\n\n  const handleCoffee = () => {\n    const currentUserTemp = [];\n\n    const userTemp = [];\n    users.forEach((e) => {\n      userTemp.push({ name: e.name, avatar: e.avatar, id: e.id });\n    });\n    userTemp[0].x = 3;\n    userTemp[0].y = 0;\n    userTemp[1].x = 3;\n    userTemp[1].y = 2;\n\n    setUsers(userTemp);\n    console.log(users);\n  };\n\n  return (\n    <div>\n      <h3>Choose Your Action</h3>\n      <div>\n        <div onClick={handleCoffee}>Drink Coffee</div>\n        <div>SHOOT</div>\n        <div>Challenge + name</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Action;\n","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/Shifoumi/Play.js",["86","87","88","89","90","91","92","93"],"import React, { useState, useEffect, useContext } from 'react';\nimport './Play.css';\nimport paper from './Images/paper.png';\nimport cisors from './Images/cisors.png';\nimport rock from './Images/rock.png';\nimport paperReverse from './Images/paperReverse.png';\nimport cisorsReverse from './Images/cisorsReverse.png';\nimport rockReverse from './Images/rockReverse.png';\nimport jesus from './Images/jesus.jpg';\nimport doctor from './Images/doctor.jpg';\nimport { UserContext } from '../../context/UserContext';\nimport { Link } from 'react-router-dom';\n\nconst Play = () => {\n  const { socket, currentUser } = useContext(UserContext);\n\n  const [player1, setPlayer1] = useState(currentUser);\n  const [player2, setPlayer2] = useState();\n  const [playerChoice, setPlayerChoice] = useState(null);\n  const [computerChoice, setComputerChoice] = useState(null);\n  const [isWinner, setIsWinner] = useState('');\n  const [playerCounter, setPlayerCounter] = useState(0);\n  const [computerCounter, setComputerCounter] = useState(0);\n  const [victorious, setVictorious] = useState();\n\n  useEffect(() => {\n    socket.emit('joinShifoumi', 'room1');\n    socket.emit('notification', `${currentUser.name} is playing Shi Fu Mi `);\n\n    socket.on('welcome', (data) => {\n      console.log(data);\n      socket.emit('userJoin', currentUser);\n    });\n\n    socket.on('player2', (player2) => {\n      setPlayer2(player2);\n    });\n\n    socket.on('player2Choice', (player2Choice) => {\n      setComputerChoice(player2Choice);\n    });\n\n    socket.on('player2Score', (score) => {\n      setComputerCounter(score);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (playerChoice) {\n      socket.emit('player1Choice', playerChoice);\n    }\n  }, [playerChoice]);\n\n  useEffect(() => {\n    if (playerCounter) {\n      socket.emit('player1Score', playerCounter);\n    }\n  }, [playerCounter]);\n\n  useEffect(() => {\n    if (playerCounter === 3) {\n      setVictorious(player1);\n    } else if (computerCounter === 3) {\n      setVictorious(player2);\n    }\n  }, [playerCounter, computerCounter]);\n\n  const comparePick = () => {\n    if (playerChoice === computerChoice) {\n      setIsWinner('Draw');\n      console.log('Draw');\n    } else if (\n      (playerChoice === 1 && computerChoice === 3) ||\n      (playerChoice === 2 && computerChoice === 1) ||\n      (playerChoice === 3 && computerChoice === 2)\n    ) {\n      setIsWinner('You win');\n      setPlayerCounter(playerCounter + 1);\n      console.log('You win');\n    } else {\n      setIsWinner('You loose');\n      //   setComputerCounter(computerCounter + 1);\n      console.log('You loose');\n    }\n    setPlayerChoice();\n    setComputerChoice();\n  };\n\n  useEffect(() => {\n    if (playerChoice && computerChoice) {\n      comparePick();\n    }\n  }, [playerChoice, computerChoice]);\n\n  const reset = () => {\n    setVictorious();\n    setPlayerCounter(0);\n    setComputerCounter(0);\n  };\n\n  return (\n    <>\n      <div className='playBody'>\n        <h1>Challenge me if you dare !</h1>\n        <h2>{isWinner}</h2>\n        {victorious && (\n          <div className='win'>\n            Player 1 won the game !\n            <div className='play-again'>\n              <input\n                className='input-play'\n                type='button'\n                value='Play again'\n                onClick={reset}\n              />\n              <Link className='button' to={'/board'}>\n                Back\n              </Link>\n            </div>\n          </div>\n        )}\n        <div className='playPart'>\n          <div className='playerChoice'>\n            <img\n              src={paper}\n              alt={paper}\n              className='playerWeapon'\n              onClick={() => {\n                setPlayerChoice(1);\n              }}\n            />\n            <img\n              src={cisors}\n              alt={cisors}\n              onClick={() => {\n                setPlayerChoice(2);\n              }}\n            />\n            <img\n              src={rock}\n              alt={rock}\n              onClick={() => {\n                setPlayerChoice(3);\n              }}\n            />\n          </div>\n          <img\n            src={player1.avatar}\n            alt={player1.name}\n            className='avatarimg'\n            style={{\n              width: 150,\n              height: 150,\n              position: 'absolute',\n              left: 150,\n              bottom: 100,\n              borderRadius: '50%',\n            }}\n          />\n          <div className='scorePartDoctor'>\n            <p>{player1 && player1.name}</p>\n            <h2>Score : {playerCounter}</h2>\n          </div>\n          <div className='computerChoice'>\n            <img src={paperReverse} alt={paperReverse} />\n            <img src={cisorsReverse} alt={cisorsReverse} />\n            <img src={rockReverse} alt={rockReverse} />\n          </div>\n          <img\n            src={player2 && player2.avatar}\n            alt={player2 && player2.name}\n            style={{\n              width: 150,\n              height: 150,\n              position: 'absolute',\n              left: 150,\n              bottom: 100,\n              borderRadius: '50%',\n            }}\n          />\n          <div className='scorePartJesus'>\n            <p>{player2 && player2.name}</p>\n\n            <h2>Score : {computerCounter}</h2>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Play;\n\n// Step 1 : Reconnaitre le click:\n// -> creation state choix du player\n// -> onClick={() => setPlayerChoice()} pour mettre à jour le state.\n\n// Step 2 : Au click donner un state d'une valeur aléatoire pour l'ordi\n// -> creer state computer\n// -> creer un random number entre 0 et 2 pour le choix de l'ordi --> console.log en premier puis mettre à jour le state.\n// -> Math.floor(Math.random() * Math.floor(3))\n\n// Step 3 : définir en fonction des 2 states liés aux choix\n// -> création d'un state isWinner pour savoir si l'utilisateur gagne\n// -> création conditions\n\n// Step 4 : créer counter:\n// -> creer state pour player et computer\n// -> incrémente de 1 dans les conditions\n// -> affichage h2 dans le return\n","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/components/CurrentUser/CurrentUser.js",["94"],"import React, { useContext } from 'react';\nimport { UserContext } from '../../context/UserContext';\nimport './CurrentUser.scss';\n\nconst CurrentUser = () => {\n  const { currentUser } = useContext(UserContext);\n\n  return (\n    <div className='user-container'>\n      <img src={currentUser.avatar} />\n      <div>\n        <div>{currentUser.name}</div>\n        <div>{currentUser.life}/100</div>\n        <div>{currentUser.nerf} nerfs</div>\n      </div>\n    </div>\n  );\n};\n\nexport default CurrentUser;\n","/Users/laurenceportron/Documents/hackathon/Hackaton-Apside/src/component/home/Chat.js",["95"],"import React, { useState, useEffect, useContext } from 'react';\nimport { UserContext } from '../../context/UserContext';\nimport '../Chat.scss';\n\nconst CoffeeChat = () => {\n  const { currentUser, socket } = useContext(UserContext);\n  const [messageArray, setMessageArray] = useState([]);\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    socket.on('message', (message) => {\n      console.log(message);\n      receivedMessage(message);\n    });\n  }, []);\n\n  const receivedMessage = (message) => {\n    setMessageArray((oldMsgs) => [...oldMsgs, message]);\n  };\n  const sendMessage = (e) => {\n    e.preventDefault();\n    const messageObject = {\n      body: message,\n      name: currentUser.name,\n    };\n    setMessage('');\n    socket.emit('send message', messageObject);\n  };\n\n  const handleChatChange = (e) => {\n    setMessage(e.target.value);\n  };\n  return (\n    <div className='ChatContainer'>\n      <h2 className='title-chat'>Let's chat!</h2>\n      <div className='message-container'>\n        {messageArray.map((message, index) => {\n          return (\n            <div className='user-message'>\n              <p key={index}>\n                {message.name}: {message.body}\n              </p>\n            </div>\n          );\n        })}\n      </div>\n      <div className='textZone'>\n        <form onSubmit={sendMessage}>\n          <textarea\n            onChange={handleChatChange}\n            placeholder='Say something...'\n          />\n          <button className='button-chat' type='submit'>\n            Send\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default CoffeeChat;\n",{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":193,"column":5,"nodeType":"102","messageId":"103","endLine":193,"endColumn":18},{"ruleId":"104","severity":1,"message":"105","line":253,"column":6,"nodeType":"106","endLine":253,"endColumn":8,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"108","line":264,"column":6,"nodeType":"106","endLine":264,"endColumn":8,"suggestions":"109"},{"ruleId":"100","severity":1,"message":"110","line":1,"column":29,"nodeType":"102","messageId":"103","endLine":1,"endColumn":38},{"ruleId":"100","severity":1,"message":"111","line":9,"column":5,"nodeType":"102","messageId":"103","endLine":9,"endColumn":13},{"ruleId":"100","severity":1,"message":"112","line":11,"column":5,"nodeType":"102","messageId":"103","endLine":11,"endColumn":19},{"ruleId":"100","severity":1,"message":"113","line":12,"column":5,"nodeType":"102","messageId":"103","endLine":12,"endColumn":17},{"ruleId":"100","severity":1,"message":"114","line":12,"column":11,"nodeType":"102","messageId":"103","endLine":12,"endColumn":16},{"ruleId":"96","replacedBy":"115"},{"ruleId":"98","replacedBy":"116"},{"ruleId":"100","severity":1,"message":"117","line":7,"column":28,"nodeType":"102","messageId":"103","endLine":7,"endColumn":39},{"ruleId":"100","severity":1,"message":"112","line":7,"column":41,"nodeType":"102","messageId":"103","endLine":7,"endColumn":55},{"ruleId":"100","severity":1,"message":"118","line":12,"column":11,"nodeType":"102","messageId":"103","endLine":12,"endColumn":26},{"ruleId":"100","severity":1,"message":"119","line":9,"column":8,"nodeType":"102","messageId":"103","endLine":9,"endColumn":13},{"ruleId":"100","severity":1,"message":"120","line":10,"column":8,"nodeType":"102","messageId":"103","endLine":10,"endColumn":14},{"ruleId":"100","severity":1,"message":"121","line":17,"column":19,"nodeType":"102","messageId":"103","endLine":17,"endColumn":29},{"ruleId":"104","severity":1,"message":"122","line":46,"column":6,"nodeType":"106","endLine":46,"endColumn":8,"suggestions":"123"},{"ruleId":"104","severity":1,"message":"124","line":52,"column":6,"nodeType":"106","endLine":52,"endColumn":20,"suggestions":"125"},{"ruleId":"104","severity":1,"message":"124","line":58,"column":6,"nodeType":"106","endLine":58,"endColumn":21,"suggestions":"126"},{"ruleId":"104","severity":1,"message":"127","line":66,"column":6,"nodeType":"106","endLine":66,"endColumn":38,"suggestions":"128"},{"ruleId":"104","severity":1,"message":"129","line":93,"column":6,"nodeType":"106","endLine":93,"endColumn":36,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":10,"column":7,"nodeType":"133","endLine":10,"endColumn":39},{"ruleId":"104","severity":1,"message":"124","line":14,"column":6,"nodeType":"106","endLine":14,"endColumn":8,"suggestions":"134"},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'isCoffeeTaken' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentUser', 'setIsCoffeeTaken', 'setUsers', and 'socket'. Either include them or remove the dependency array.","ArrayExpression",["137"],"React Hook useEffect has missing dependencies: 'currentUser.id', 'setCurrentUser', 'setUsers', and 'socket'. Either include them or remove the dependency array.",["138"],"'useEffect' is defined but never used.","'setUsers' is assigned a value but never used.","'setCurrentUser' is assigned a value but never used.","'isActionOpen' is assigned a value but never used.","'users' is assigned a value but never used.",["135"],["136"],"'currentUser' is assigned a value but never used.","'currentUserTemp' is assigned a value but never used.","'jesus' is defined but never used.","'doctor' is defined but never used.","'setPlayer1' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser' and 'socket'. Either include them or remove the dependency array.",["139"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["140"],["141"],"React Hook useEffect has missing dependencies: 'player1' and 'player2'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setVictorious' needs the current value of 'player1'.",["142"],"React Hook useEffect has a missing dependency: 'comparePick'. Either include it or remove the dependency array.",["143"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["144"],"no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},"Update the dependencies array to be: [currentUser, setIsCoffeeTaken, setUsers, socket]",{"range":"161","text":"162"},"Update the dependencies array to be: [currentUser.id, setCurrentUser, setUsers, socket]",{"range":"163","text":"164"},"Update the dependencies array to be: [currentUser, socket]",{"range":"165","text":"166"},"Update the dependencies array to be: [playerChoice, socket]",{"range":"167","text":"168"},"Update the dependencies array to be: [playerCounter, socket]",{"range":"169","text":"170"},"Update the dependencies array to be: [playerCounter, computerCounter, player1, player2]",{"range":"171","text":"172"},"Update the dependencies array to be: [playerChoice, computerChoice, comparePick]",{"range":"173","text":"174"},"Update the dependencies array to be: [socket]",{"range":"175","text":"176"},[6031,6033],"[currentUser, setIsCoffeeTaken, setUsers, socket]",[6300,6302],"[currentUser.id, setCurrentUser, setUsers, socket]",[1587,1589],"[currentUser, socket]",[1698,1712],"[playerChoice, socket]",[1822,1837],"[playerCounter, socket]",[2003,2035],"[playerCounter, computerCounter, player1, player2]",[2735,2765],"[playerChoice, computerChoice, comparePick]",[466,468],"[socket]"]