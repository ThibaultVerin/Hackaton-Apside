[{"/home/antoine/Quests/hackaton/Hackaton-Apside/src/index.js":"1","/home/antoine/Quests/hackaton/Hackaton-Apside/src/App.js":"2","/home/antoine/Quests/hackaton/Hackaton-Apside/src/reportWebVitals.js":"3","/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Home/Home.js":"4","/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Home/Upload.js":"5","/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Board/Board.js":"6","/home/antoine/Quests/hackaton/Hackaton-Apside/src/context/UserContext.js":"7","/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Board/Cell.js":"8","/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Home/Background.js":"9","/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Home/SoundEffectContext.js":"10","/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Home/Modal.js":"11","/home/antoine/Quests/hackaton/Hackaton-Apside/src/component/home/Chat.js":"12","/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Action/Action.js":"13","/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Shifoumi/Play.js":"14","/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/CurrentUser/CurrentUser.js":"15"},{"size":449,"mtime":1610654145712,"results":"16","hashOfConfig":"17"},{"size":786,"mtime":1610706403806,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1610539132830,"results":"19","hashOfConfig":"17"},{"size":402,"mtime":1610660118222,"results":"20","hashOfConfig":"17"},{"size":3296,"mtime":1610704434776,"results":"21","hashOfConfig":"17"},{"size":6540,"mtime":1610706450565,"results":"22","hashOfConfig":"17"},{"size":1043,"mtime":1610704617650,"results":"23","hashOfConfig":"17"},{"size":1357,"mtime":1610706450565,"results":"24","hashOfConfig":"17"},{"size":239,"mtime":1610654145712,"results":"25","hashOfConfig":"17"},{"size":478,"mtime":1610660118222,"results":"26","hashOfConfig":"17"},{"size":412,"mtime":1610572098700,"results":"27","hashOfConfig":"17"},{"size":1622,"mtime":1610706866397,"results":"28","hashOfConfig":"17"},{"size":2467,"mtime":1610706450565,"results":"29","hashOfConfig":"17"},{"size":6413,"mtime":1610706403806,"results":"30","hashOfConfig":"17"},{"size":494,"mtime":1610704434776,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1mjy1bu",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"34"},"/home/antoine/Quests/hackaton/Hackaton-Apside/src/index.js",[],["71","72"],"/home/antoine/Quests/hackaton/Hackaton-Apside/src/App.js",[],"/home/antoine/Quests/hackaton/Hackaton-Apside/src/reportWebVitals.js",[],"/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Home/Home.js",[],"/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Home/Upload.js",["73","74"],"import React, { useState, useContext } from 'react';\nimport Modal from './Modal';\nimport './Modal.scss';\nimport './Upload.scss';\nimport axios from 'axios';\nimport { UserContext } from '../../context/UserContext';\nimport { Link } from 'react-router-dom';\nimport uuid from 'react-uuid';\n\nconst Upload = () => {\n  const [title, setTitle] = useState('');\n  const [mainPicture, setMainPicture] = useState(null);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { users, setUsers, currentUser, setCurrentUser } = useContext(\n    UserContext\n  );\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const formData = new FormData();\n    formData.append('title', title);\n    formData.append('main_picture', mainPicture);\n\n    const res = await axios.post(\n      'http://localhost:5000/uploaddufichier',\n      formData\n    );\n\n    const newUser = {\n      name: res.data.name,\n      avatar: `http://localhost:5000/${res.data.path}`,\n      x: Math.floor(Math.random() * 10),\n      y: Math.floor(Math.random() * 10),\n      id: uuid(),\n    };\n    await setCurrentUser(newUser);\n    await setUsers([newUser]);\n  };\n\n  return (\n    <div className='main'>\n      <div className='title'>\n        <h2>Welcome On Board !</h2>\n      </div>\n      <form className='form' onSubmit={handleSubmit}>\n        <input\n          type='text'\n          className='name'\n          placeholder='Enter your Name'\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n        <br />\n        <div className='select'>\n          <p>Select your picture</p>\n        </div>\n\n        <input\n          type='file'\n          className='upload'\n          onChange={(e) => setMainPicture(e.target.files[0])}\n        />\n        <br />\n        <input type='submit' className='submit' value='Create Your Avatar' />\n        <div\n          className='explanation'\n          onClick={() => setIsModalOpen(!isModalOpen)}\n        >\n          <p>how does it work ?</p>\n        </div>\n      </form>\n      <div onClick={() => setIsModalOpen(!isModalOpen)}>\n        <Modal showModal={isModalOpen}>\n          <div className='modalHeader'>\n            <h2>Here how to play</h2>\n          </div>\n          <div className='modalBody'>\n            <h3>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n              eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n              enim ad minim veniam, quis nostrud exercitation ullamco laboris\n              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n              reprehenderit in voluptate velit esse cillum dolore eu fugiat\n              nulla pariatur. Excepteur sint occaecat cupidatat non proident,\n              sunt in culpa qui officia deserunt mollit anim id est laborum\n            </h3>\n          </div>\n          <div className='modalFooter'>\n            <button\n              type='button'\n              className='modalButton'\n              onClick={() => setIsModalOpen(!isModalOpen)}\n            >\n              Back\n            </button>\n          </div>\n        </Modal>\n      </div>\n      <Link to='/board' className='join'>\n        <div classname='a'>Join</div>\n      </Link>\n    </div>\n  );\n};\n\nexport default Upload;\n","/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Board/Board.js",["75","76","77"],"import React, { useState, useContext, useEffect } from 'react';\nimport './Board.scss';\nimport Cell from './Cell';\nimport CoffeeChat from '../../component/home/Chat';\nimport Background from '../Home/Background';\nimport Action from '../Action/Action';\nimport addNotification from 'react-push-notification';\n\nimport { UserContext } from '../../context/UserContext';\nimport CurrentUser from '../CurrentUser/CurrentUser';\n// import Action from '../Action/Action';\n\nexport const createEmptyBoard = () => {\n  const BOARD_SIZE = 10;\n  const board = new Array(BOARD_SIZE);\n\n  for (let x = 0; x < BOARD_SIZE; x++) {\n    board[x] = new Array(BOARD_SIZE);\n    for (let y = 0; y < BOARD_SIZE; y++) {\n      board[x][y] = {\n        x,\n        y,\n        isPeople: false,\n        isWall: false,\n        isCoffee: false,\n        isComputer: false,\n        isDesk: false,\n        isTree: false,\n      };\n    }\n  }\n  return board;\n};\nexport const handleClassname = (cell) => {\n  if (cell.isWall === true) {\n    return 'wall';\n  } else if (cell.isCoffee === true) {\n    return 'coffee';\n  } else if (cell.isComputer === true) {\n    return 'computer';\n  } else if (cell.isDesk === true) {\n    return 'desk';\n  } else if (cell.isTree === true) {\n    return 'tree';\n  } else {\n    return 'cell';\n  }\n};\n\nexport const drawBoard = (board, user) => {\n  return board.map((row) => {\n    return row.map((cell, index) => {\n      return (\n        <Cell\n          key={index}\n          cellStyle={cell.isWall ? 'wall' : 'cell'}\n          isPlayer={cell.isPeople}\n          cell={cell}\n        />\n      );\n    });\n  });\n};\nexport const populateWithTree = (board, tree) => {\n  board.forEach((row) => {\n    row.forEach((cell) => {\n      tree.forEach((wCell) => {\n        if (wCell.x === cell.x && wCell.y === cell.y) {\n          return (cell.isTree = true);\n        }\n      });\n    });\n  });\n};\nexport const populateWithDesk = (board, desk) => {\n  board.forEach((row) => {\n    row.forEach((cell) => {\n      desk.forEach((wCell) => {\n        if (wCell.x === cell.x && wCell.y === cell.y) {\n          return (cell.isDesk = true);\n        }\n      });\n    });\n  });\n};\nexport const populateWithComputer = (board, computer) => {\n  board.forEach((row) => {\n    row.forEach((cell) => {\n      computer.forEach((wCell) => {\n        if (wCell.x === cell.x && wCell.y === cell.y) {\n          return (cell.isComputer = true);\n        }\n      });\n    });\n  });\n};\nexport const populateWithCoffee = (board, coffee) => {\n  board.forEach((row) => {\n    row.forEach((cell) => {\n      coffee.forEach((wCell) => {\n        if (wCell.x === cell.x && wCell.y === cell.y) {\n          return (cell.isCoffee = true);\n        }\n      });\n    });\n  });\n};\nexport const populateWithWall = (board, wall) => {\n  board.forEach((row) => {\n    row.forEach((cell) => {\n      wall.forEach((wCell) => {\n        if (wCell.x === cell.x && wCell.y === cell.y) {\n          return (cell.isWall = true);\n        }\n      });\n    });\n  });\n};\nexport const populateWithPeople = (board, people) => {\n  if (people) {\n    board.forEach((row) => {\n      row.forEach((cell) => {\n        people.forEach((p) => {\n          if (cell && p) {\n            if (p.x === cell.x && p.y === cell.y) {\n              cell.isPeople = true;\n              cell.avatar = p.avatar;\n              cell.user = p;\n              return cell;\n            }\n          }\n        });\n      });\n    });\n  }\n};\nexport const createBoard = (tree, desk, computer, coffee, wall, people) => {\n  const b = createEmptyBoard();\n  populateWithTree(b, tree);\n  populateWithDesk(b, desk);\n  populateWithComputer(b, computer);\n  populateWithCoffee(b, coffee);\n  populateWithWall(b, wall);\n  populateWithPeople(b, people);\n  return b;\n};\n\nexport const wall = [\n  { x: 0, y: 6 },\n  { x: 1, y: 6 },\n  { x: 3, y: 6 },\n  { x: 3, y: 7 },\n  { x: 3, y: 8 },\n  { x: 3, y: 9 },\n  { x: 2, y: 0 },\n  { x: 2, y: 1 },\n  { x: 2, y: 2 },\n  { x: 2, y: 3 },\n  { x: 3, y: 3 },\n  { x: 4, y: 3 },\n  { x: 7, y: 5 },\n  { x: 8, y: 5 },\n  { x: 9, y: 5 },\n];\n\nexport const coffee = [{ x: 3, y: 1 }];\n\nexport const computer = [{ x: 0, y: 8 }];\nexport const desk = [\n  { x: 7, y: 1 },\n  { x: 7, y: 3 },\n  { x: 9, y: 1 },\n  { x: 9, y: 3 },\n];\n\nexport const tree = [\n  { x: 0, y: 5 },\n  { x: 4, y: 9 },\n  { x: 7, y: 6 },\n  { x: 8, y: 9 },\n  { x: 9, y: 7 },\n];\n\nexport const shootPlayer = () => {};\n\nconst Board = () => {\n  const {\n    users,\n    setUsers,\n    currentUser,\n    setCurrentUser,\n    isActionOpen,\n    isCoffeeTaken,\n    setIsCoffeeTaken,\n    socket,\n  } = useContext(UserContext);\n\n  const initialBoard = createBoard(tree, desk, computer, coffee, wall, users);\n\n  const [board, setBoard] = useState(initialBoard);\n  useEffect(() => {\n    const newBoard = createBoard(tree, desk, computer, coffee, wall, users);\n    setBoard(newBoard);\n  }, [users]);\n\n  useEffect(() => {\n    let usersRegistered = [];\n    socket.emit('sendCurrentUser', currentUser);\n\n    socket.on('connect', () => {});\n\n    socket.on('sendNewUser', (newUser) => {\n      const userAlreadyExist = usersRegistered.some(\n        (user) => user.id === newUser.id\n      );\n\n      if (!userAlreadyExist) {\n        usersRegistered.push(newUser);\n        setUsers((prevState) => [...prevState, newUser]);\n      }\n      socket.emit('clientSendFirstUser', currentUser);\n    });\n\n    socket.on('serverSendFirstUser', (newUser) => {\n      const userAlreadyExist = usersRegistered.some(\n        (user) => user.id === newUser.id\n      );\n\n      if (!userAlreadyExist) {\n        usersRegistered.push(newUser);\n        setUsers((prevState) => [...prevState, newUser]);\n      }\n    });\n    socket.on('openChat', () => {\n      setIsCoffeeTaken(true);\n    });\n\n    socket.emit('notification', `${currentUser.name} just join the board !`);\n\n    socket.on('send-notification', (message) => {\n      console.log(message);\n      addNotification({\n        title: 'BREAKING BOARD',\n        message: message,\n        native: true,\n        duration: 5000,\n      });\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  useEffect(() => {\n    socket.on('otherUserMove', (data) => {\n      setUsers((users) => {\n        return [...users.filter((user) => user.id !== data.id), data];\n      });\n      if (data.id === currentUser.id) {\n        setCurrentUser(data);\n      }\n    });\n  }, []);\n\n  return (\n    <div>\n      <Background />\n      <CurrentUser />\n\n      {isActionOpen && <Action />}\n\n      <div className='board-container'>{drawBoard(board, users)}</div>\n      <CoffeeChat />\n    </div>\n  );\n};\nexport default Board;\n","/home/antoine/Quests/hackaton/Hackaton-Apside/src/context/UserContext.js",[],"/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Board/Cell.js",["78","79","80","81"],"import React, { useContext } from 'react';\nimport { UserContext } from '../../context/UserContext';\nimport { handleClassname, shootPlayer } from './Board';\nimport { useHistory } from 'react-router-dom';\n\nexport default function Cell(props) {\n  const { isPlayer, cell } = props;\n  const {\n    users,\n    setUsers,\n    currentUser,\n    setCurrentUser,\n    isActionOpen,\n    setIsActionOpen,\n    socket,\n    setPlayerShot,\n  } = useContext(UserContext);\n\n  const history = useHistory();\n\n  let newCurrentUser = {};\n\n  const handleClick = (e) => {\n    if (cell.isComputer) {\n      history.push('/game');\n    }\n    if (isPlayer) {\n      setPlayerShot(cell.user);\n\n      setIsActionOpen(true);\n    } else {\n      setIsActionOpen(false);\n\n      if (cell.isPlayer) {\n        console.log(cell.user);\n      } else {\n        const userIndex = users.findIndex((user) => user.id === currentUser.id);\n\n        newCurrentUser = {\n          // eslint-disable-next-line no-restricted-globals\n          name: users[userIndex].name,\n          avatar: users[userIndex].avatar,\n          id: users[userIndex].id,\n          life: users[userIndex].life,\n          nerf: users[userIndex].nerf,\n          x: cell.x,\n          y: cell.y,\n        };\n\n        socket.emit('currentUserMove', newCurrentUser);\n      }\n    }\n  };\n\n  return (\n    <div className={cell && handleClassname(cell)} onClick={handleClick}>\n      {isPlayer && <img src={cell.avatar} alt='avatar' />}\n    </div>\n  );\n}\n","/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Home/Background.js",[],"/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Home/SoundEffectContext.js",[],"/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Home/Modal.js",[],["82","83"],"/home/antoine/Quests/hackaton/Hackaton-Apside/src/component/home/Chat.js",["84"],"import React, { useState, useEffect, useContext } from 'react';\nimport { UserContext } from '../../context/UserContext';\nimport '../Chat.scss';\n\nconst CoffeeChat = () => {\n  const { currentUser, socket } = useContext(UserContext);\n  const [messageArray, setMessageArray] = useState([]);\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    socket.on('message', (message) => {\n      console.log(message);\n      receivedMessage(message);\n    });\n  }, []);\n\n  const receivedMessage = (message) => {\n    setMessageArray((oldMsgs) => [...oldMsgs, message]);\n  };\n  const sendMessage = (e) => {\n    e.preventDefault();\n    const messageObject = {\n      body: message,\n      name: currentUser.name,\n    };\n    setMessage('');\n    socket.emit('send message', messageObject);\n  };\n\n  const handleChatChange = (e) => {\n    setMessage(e.target.value);\n  };\n  return (\n    <div className='ChatContainer'>\n      <h2 className='title-chat'>Let's chat!</h2>\n      <div className='message-container'>\n        {messageArray.map((message, index) => {\n          return (\n            <div className='user-message'>\n              <p key={index}>\n                {message.name}: {message.body}\n              </p>\n            </div>\n          );\n        })}\n      </div>\n      <div className='textZone'>\n        <form onSubmit={sendMessage}>\n          <textarea\n            onChange={handleChatChange}\n            placeholder='Say something...'\n          />\n          <button className='button-chat' type='submit'>\n            Send\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default CoffeeChat;\n","/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Action/Action.js",["85","86","87"],"import React, { useState, useContext } from 'react';\nimport { UserContext } from '../../context/UserContext';\nimport './Action.scss';\nimport addNotification from 'react-push-notification';\n\nconst Action = () => {\n  const [isClicked, setIsClicked] = useState(false);\n\n  const {\n    users,\n    setUsers,\n\n    currentUser,\n    setCurrentUser,\n    isCoffeeTaken,\n    setIsCoffeeTaken,\n    playerShot,\n    socket,\n  } = useContext(UserContext);\n  const handleCoffee = () => {\n    const userTemp = [];\n    users.forEach((e) => {\n      userTemp.push({\n        name: e.name,\n        avatar: e.avatar,\n        id: e.id,\n        isCoffeeTaken: true,\n      });\n    });\n    userTemp[0].x = 3;\n    userTemp[0].y = 0;\n    userTemp[1].x = 3;\n    userTemp[1].y = 2;\n\n    setIsClicked(true);\n    setIsCoffeeTaken(true);\n    setUsers(userTemp);\n    console.log(users);\n    socket.emit('notification', 'Wanna get a coffee ?');\n    socket.emit('takeCoffee', 'coucou');\n  };\n\n  const shootPlayer = () => {\n    const updateUser = {\n      // eslint-disable-next-line no-restricted-globals\n      name: playerShot.name,\n      avatar: playerShot.avatar,\n      id: playerShot.id,\n      x: playerShot.x,\n      y: playerShot.y,\n      life: playerShot.life - 10,\n      nerf: playerShot.nerf,\n    };\n\n    const updateCurrentUser = {\n      nerf: currentUser.nerf - 1,\n      name: currentUser.name,\n      avatar: currentUser.avatar,\n      id: currentUser.id,\n      x: currentUser.x,\n      y: currentUser.y,\n      life: currentUser.life,\n    };\n\n    socket.emit('currentUserMove', updateCurrentUser);\n    socket.emit('currentUserMove', updateUser);\n    socket.emit(\n      'notification',\n      `${currentUser.name} just shot ${playerShot.name} `\n    );\n  };\n\n  const handleBreathe = () => {\n    const userTemp = [];\n    users.forEach((e) => {\n      userTemp.push({ name: e.name, avatar: e.avatar, id: e.id });\n    });\n    userTemp[0].x = 8;\n    userTemp[0].y = 7;\n    userTemp[1].x = 8;\n    userTemp[1].y = 8;\n\n    setIsClicked(true);\n    setIsCoffeeTaken(true);\n    setUsers(userTemp);\n  };\n\n  return (\n    <>\n      {!isClicked && (\n        <div className='actionMenu'>\n          <h3>Choose Your Action</h3>\n          <div className='actionLink'>\n            <p onClick={handleCoffee}>Drink Coffee</p>\n            <p onClick={shootPlayer}>SHOOOOOOT</p>\n            <p onClick={handleBreathe}>Breathe Some Fresh Air</p>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Action;\n","/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/Shifoumi/Play.js",["88","89","90","91","92","93","94"],"import React, { useState, useEffect, useContext } from 'react';\nimport './Play.css';\nimport paper from './Images/paper.png';\nimport cisors from './Images/cisors.png';\nimport rock from './Images/rock.png';\nimport paperReverse from './Images/paperReverse.png';\nimport cisorsReverse from './Images/cisorsReverse.png';\nimport rockReverse from './Images/rockReverse.png';\nimport jesus from './Images/jesus.jpg';\nimport doctor from './Images/doctor.jpg';\nimport { UserContext } from '../../context/UserContext';\nimport { Link } from 'react-router-dom';\n\nconst Play = () => {\n  const { socket, currentUser } = useContext(UserContext);\n\n  const [player1, setPlayer1] = useState(currentUser);\n  const [player2, setPlayer2] = useState();\n  const [playerChoice, setPlayerChoice] = useState(null);\n  const [computerChoice, setComputerChoice] = useState(null);\n  const [isWinner, setIsWinner] = useState('');\n  const [playerCounter, setPlayerCounter] = useState(0);\n  const [computerCounter, setComputerCounter] = useState(0);\n  const [victorious, setVictorious] = useState();\n\n  useEffect(() => {\n    socket.emit('joinShifoumi', 'room1');\n\n    socket.on('welcome', (data) => {\n      console.log(data);\n      socket.emit('userJoin', currentUser);\n    });\n\n    socket.on('player2', (player2) => {\n      setPlayer2(player2);\n    });\n\n    socket.on('player2Choice', (player2Choice) => {\n      setComputerChoice(player2Choice);\n    });\n\n    socket.on('player2Score', (score) => {\n      setComputerCounter(score);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (playerChoice) {\n      socket.emit('player1Choice', playerChoice);\n    }\n  }, [playerChoice]);\n\n  useEffect(() => {\n    if (playerCounter) {\n      socket.emit('player1Score', playerCounter);\n    }\n  }, [playerCounter]);\n\n  useEffect(() => {\n    if (playerCounter === 3) {\n      setVictorious(player1);\n    } else if (computerCounter === 3) {\n      setVictorious(player2);\n    }\n  }, [playerCounter, computerCounter]);\n\n  const comparePick = () => {\n    if (playerChoice === computerChoice) {\n      setIsWinner('Draw');\n      console.log('Draw');\n    } else if (\n      (playerChoice === 1 && computerChoice === 3) ||\n      (playerChoice === 2 && computerChoice === 1) ||\n      (playerChoice === 3 && computerChoice === 2)\n    ) {\n      setIsWinner('You win');\n      setPlayerCounter(playerCounter + 1);\n      console.log('You win');\n    } else {\n      setIsWinner('You loose');\n      //   setComputerCounter(computerCounter + 1);\n      console.log('You loose');\n    }\n    setPlayerChoice();\n    setComputerChoice();\n  };\n\n  useEffect(() => {\n    if (playerChoice && computerChoice) {\n      comparePick();\n    }\n  }, [playerChoice, computerChoice]);\n\n  const showWinner = () => {\n    if (!victorious) {\n      return (\n        <div className='playBody'>\n          <h1>Challenge me if you dare !</h1>\n          <h2>{isWinner}</h2>\n          <div className='playPart'>\n            <div className='playerChoice'>\n              <img\n                src={paper}\n                alt={paper}\n                className='playerWeapon'\n                onClick={() => {\n                  setPlayerChoice(1);\n                }}\n              />\n              <img\n                src={cisors}\n                alt={cisors}\n                onClick={() => {\n                  setPlayerChoice(2);\n                }}\n              />\n              <img\n                src={rock}\n                alt={rock}\n                onClick={() => {\n                  setPlayerChoice(3);\n                }}\n              />\n            </div>\n            <img\n              src={player1.avatar}\n              alt={player1.name}\n              className='avatarimg'\n              style={{\n                width: 300,\n                height: 400,\n                position: 'absolute',\n                left: 50,\n                bottom: 150,\n                borderRadius: 20,\n              }}\n            />\n            <div className='scorePartDoctor'>\n              <p>{player1 && player1.name}</p>\n              <h2>Score : {playerCounter}</h2>\n            </div>\n            <div className='computerChoice'>\n              <img src={paperReverse} alt={paperReverse} />\n              <img src={cisorsReverse} alt={cisorsReverse} />\n              <img src={rockReverse} alt={rockReverse} />\n            </div>\n            <img\n              src={player2 && player2.avatar}\n              alt={player2 && player2.name}\n              style={{\n                width: 300,\n                height: 400,\n                position: 'absolute',\n                right: 50,\n                bottom: 150,\n                borderRadius: 20,\n              }}\n            />\n            <div className='scorePartJesus'>\n              <p>{player2 && player2.name}</p>\n\n              <h2>Score : {computerCounter}</h2>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <img\n            src={doctor}\n            alt='aa'\n            style={{\n              width: 300,\n              height: 400,\n              position: 'absolute',\n              right: 50,\n              bottom: 150,\n              borderRadius: 20,\n            }}\n          />\n          {/* {victorious.name} */}\n          Player 1 won the game !\n          <div>\n            <input type='button' value='Play again' onClick={reset} />\n            <Link to={'/board'}>Back</Link>\n          </div>\n        </div>\n      );\n    }\n  };\n\n  const reset = () => {\n    setVictorious();\n    setPlayerCounter(0);\n    setComputerCounter(0);\n  };\n\n  return <>{showWinner()}</>;\n};\n\nexport default Play;\n\n// Step 1 : Reconnaitre le click:\n// -> creation state choix du player\n// -> onClick={() => setPlayerChoice()} pour mettre à jour le state.\n\n// Step 2 : Au click donner un state d'une valeur aléatoire pour l'ordi\n// -> creer state computer\n// -> creer un random number entre 0 et 2 pour le choix de l'ordi --> console.log en premier puis mettre à jour le state.\n// -> Math.floor(Math.random() * Math.floor(3))\n\n// Step 3 : définir en fonction des 2 states liés aux choix\n// -> création d'un state isWinner pour savoir si l'utilisateur gagne\n// -> création conditions\n\n// Step 4 : créer counter:\n// -> creer state pour player et computer\n// -> incrémente de 1 dans les conditions\n// -> affichage h2 dans le return\n","/home/antoine/Quests/hackaton/Hackaton-Apside/src/components/CurrentUser/CurrentUser.js",["95"],"import React, { useContext } from 'react';\nimport { UserContext } from '../../context/UserContext';\nimport './CurrentUser.scss';\n\nconst CurrentUser = () => {\n  const { currentUser } = useContext(UserContext);\n\n  return (\n    <div className='user-container'>\n      <img src={currentUser.avatar} />\n      <div>\n        <div>{currentUser.name}</div>\n        <div>{currentUser.life}/100</div>\n        <div>{currentUser.nerf} nerfs</div>\n      </div>\n    </div>\n  );\n};\n\nexport default CurrentUser;\n",{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":13,"column":11,"nodeType":"102","messageId":"103","endLine":13,"endColumn":16},{"ruleId":"100","severity":1,"message":"104","line":13,"column":28,"nodeType":"102","messageId":"103","endLine":13,"endColumn":39},{"ruleId":"100","severity":1,"message":"105","line":193,"column":5,"nodeType":"102","messageId":"103","endLine":193,"endColumn":18},{"ruleId":"106","severity":1,"message":"107","line":253,"column":6,"nodeType":"108","endLine":253,"endColumn":8,"suggestions":"109"},{"ruleId":"106","severity":1,"message":"110","line":264,"column":6,"nodeType":"108","endLine":264,"endColumn":8,"suggestions":"111"},{"ruleId":"100","severity":1,"message":"112","line":3,"column":27,"nodeType":"102","messageId":"103","endLine":3,"endColumn":38},{"ruleId":"100","severity":1,"message":"113","line":10,"column":5,"nodeType":"102","messageId":"103","endLine":10,"endColumn":13},{"ruleId":"100","severity":1,"message":"114","line":12,"column":5,"nodeType":"102","messageId":"103","endLine":12,"endColumn":19},{"ruleId":"100","severity":1,"message":"115","line":13,"column":5,"nodeType":"102","messageId":"103","endLine":13,"endColumn":17},{"ruleId":"96","replacedBy":"116"},{"ruleId":"98","replacedBy":"117"},{"ruleId":"106","severity":1,"message":"118","line":14,"column":6,"nodeType":"108","endLine":14,"endColumn":8,"suggestions":"119"},{"ruleId":"100","severity":1,"message":"120","line":4,"column":8,"nodeType":"102","messageId":"103","endLine":4,"endColumn":23},{"ruleId":"100","severity":1,"message":"114","line":14,"column":5,"nodeType":"102","messageId":"103","endLine":14,"endColumn":19},{"ruleId":"100","severity":1,"message":"105","line":15,"column":5,"nodeType":"102","messageId":"103","endLine":15,"endColumn":18},{"ruleId":"100","severity":1,"message":"121","line":9,"column":8,"nodeType":"102","messageId":"103","endLine":9,"endColumn":13},{"ruleId":"100","severity":1,"message":"122","line":17,"column":19,"nodeType":"102","messageId":"103","endLine":17,"endColumn":29},{"ruleId":"106","severity":1,"message":"123","line":45,"column":6,"nodeType":"108","endLine":45,"endColumn":8,"suggestions":"124"},{"ruleId":"106","severity":1,"message":"118","line":51,"column":6,"nodeType":"108","endLine":51,"endColumn":20,"suggestions":"125"},{"ruleId":"106","severity":1,"message":"118","line":57,"column":6,"nodeType":"108","endLine":57,"endColumn":21,"suggestions":"126"},{"ruleId":"106","severity":1,"message":"127","line":65,"column":6,"nodeType":"108","endLine":65,"endColumn":38,"suggestions":"128"},{"ruleId":"106","severity":1,"message":"129","line":92,"column":6,"nodeType":"108","endLine":92,"endColumn":36,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":10,"column":7,"nodeType":"133","endLine":10,"endColumn":39},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-unused-vars","'users' is assigned a value but never used.","Identifier","unusedVar","'currentUser' is assigned a value but never used.","'isCoffeeTaken' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentUser', 'setIsCoffeeTaken', 'setUsers', and 'socket'. Either include them or remove the dependency array.","ArrayExpression",["136"],"React Hook useEffect has missing dependencies: 'currentUser.id', 'setCurrentUser', 'setUsers', and 'socket'. Either include them or remove the dependency array.",["137"],"'shootPlayer' is defined but never used.","'setUsers' is assigned a value but never used.","'setCurrentUser' is assigned a value but never used.","'isActionOpen' is assigned a value but never used.",["134"],["135"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["138"],"'addNotification' is defined but never used.","'jesus' is defined but never used.","'setPlayer1' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser' and 'socket'. Either include them or remove the dependency array.",["139"],["140"],["141"],"React Hook useEffect has missing dependencies: 'player1' and 'player2'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setVictorious' needs the current value of 'player1'.",["142"],"React Hook useEffect has a missing dependency: 'comparePick'. Either include it or remove the dependency array.",["143"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [currentUser, setIsCoffeeTaken, setUsers, socket]",{"range":"160","text":"161"},"Update the dependencies array to be: [currentUser.id, setCurrentUser, setUsers, socket]",{"range":"162","text":"163"},"Update the dependencies array to be: [socket]",{"range":"164","text":"165"},"Update the dependencies array to be: [currentUser, socket]",{"range":"166","text":"167"},"Update the dependencies array to be: [playerChoice, socket]",{"range":"168","text":"169"},"Update the dependencies array to be: [playerCounter, socket]",{"range":"170","text":"171"},"Update the dependencies array to be: [playerCounter, computerCounter, player1, player2]",{"range":"172","text":"173"},"Update the dependencies array to be: [playerChoice, computerChoice, comparePick]",{"range":"174","text":"175"},[6031,6033],"[currentUser, setIsCoffeeTaken, setUsers, socket]",[6300,6302],"[currentUser.id, setCurrentUser, setUsers, socket]",[466,468],"[socket]",[1509,1511],"[currentUser, socket]",[1620,1634],"[playerChoice, socket]",[1744,1759],"[playerCounter, socket]",[1925,1957],"[playerCounter, computerCounter, player1, player2]",[2657,2687],"[playerChoice, computerChoice, comparePick]"]